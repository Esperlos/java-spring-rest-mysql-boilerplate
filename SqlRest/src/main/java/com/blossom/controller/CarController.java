package com.blossom.controller;

import com.mysql.jdbc.PreparedStatement;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.web.bind.annotation.*;

import com.blossom.repository.CarRepository;
import com.blossom.model.Car;

import javax.activation.DataSource;
import java.sql.Connection;

@RestController    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class CarController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private CarRepository carRepository;

	@Autowired
	JdbcTemplate jdbcTemplate;

	@PostMapping(path="/add")
	@ResponseStatus(HttpStatus.CREATED)
	@ResponseBody
	public String addNewCar (@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Car n = new Car();
		n.setName(name);
		carRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	@ResponseBody
	public Iterable<Car> getAllCars() {
		// This returns a JSON or XML with the users
		return carRepository.findAll();
	}

	@PostMapping(path="/find")
	@ResponseBody
	public Iterable<Car> findByName(@RequestParam String name) {
		// This returns a JSON or XML with the users
		return carRepository.findByName(name);
	}

	@PostMapping(path="/search")
	@ResponseBody
	public Iterable<Car> searchByName(@RequestParam String name){
		//You can try "%" + name or name + "%" as object also
		return jdbcTemplate.query(
				"SELECT name FROM car WHERE name LIKE ?", new Object[] { "%" + name + "%" },
				(rs, rowNum) -> new Car(rs.getString("name"))
		);
	}
}
